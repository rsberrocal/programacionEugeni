/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cyclists.forms.Stage;

import cyclists.Database;
import cyclists.Entity.Ports;
import cyclists.Entity.Stage;
import cyclists.forms.MainForm;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/**
 *
 * @author Richard
 */
public class AddStage extends javax.swing.JFrame {

    /**
     * Creates new form AddPort
     */
    public AddStage() {
        initComponents();
        try {
            //Filling the ComboBox            
            Stage s = new Stage();
            s.loadTable(pTableStage);
            s.addItemsCombo(cbDorsal);
        } catch (SQLException ex) {
            Logger.getLogger(AddStage.class.getName()).log(Level.SEVERE, null, ex);
        }
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../../../images/icon.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfStart = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btInsert = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfNum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfKM = new javax.swing.JTextField();
        pTableStage = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbDorsal = new javax.swing.JComboBox<>();
        tfFinish = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Num Stage");

        btInsert.setText("Insert");
        btInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInsertActionPerformed(evt);
            }
        });

        jLabel2.setText("New Stage");

        tfNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfNumKeyTyped(evt);
            }
        });

        jLabel4.setText("Km");

        jLabel5.setText("Start");

        tfKM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKMKeyTyped(evt);
            }
        });

        pTableStage.setMaximumSize(new java.awt.Dimension(32767, 234));

        javax.swing.GroupLayout pTableStageLayout = new javax.swing.GroupLayout(pTableStage);
        pTableStage.setLayout(pTableStageLayout);
        pTableStageLayout.setHorizontalGroup(
            pTableStageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );
        pTableStageLayout.setVerticalGroup(
            pTableStageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        jLabel6.setText("Finish");

        jLabel7.setText("Cyclist Dorsal");

        cbDorsal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btInsert))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(13, 13, 13)
                                    .addComponent(jLabel1))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(jLabel4)
                                    .addGap(15, 15, 15)))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfKM, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(tfNum, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfStart, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(cbDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pTableStage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pTableStage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfKM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFinish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btInsert)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInsertActionPerformed
        // TODO add your handling code here:
        // tfAlerts
        if (tfNum.getText().isEmpty() && tfKM.getText().isEmpty() && tfStart.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "All values missing", "Stage number, km, start and finish fields are missing");
            tfNum.requestFocus();
        } else if (tfNum.getText().isEmpty() && tfKM.getText().isEmpty() && tfStart.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number, km and start fields are missing");
            tfNum.requestFocus();
        } else if (tfNum.getText().isEmpty() && tfKM.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number, km and finish fields are missing");
            tfNum.requestFocus();
        } else if (tfNum.getText().isEmpty() && tfStart.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number, start and finish fields are missing");
            tfNum.requestFocus();
        } else if (tfKM.getText().isEmpty() && tfStart.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Km, start and finish fields are missing");
        } else if (tfNum.getText().isEmpty() && tfStart.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number and finish fields are missing");
            tfNum.requestFocus();
        } else if (tfNum.getText().isEmpty() && tfKM.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number and km fields are missing");
            tfNum.requestFocus();
        } else if (tfNum.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Stage number and finish fields are missing");
            tfNum.requestFocus();
        } else if (tfStart.getText().isEmpty() && tfNum.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Start and stage number fields are missing");
            tfNum.requestFocus();
        } else if (tfStart.getText().isEmpty() && tfKM.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Start and km fields are missing");
            tfKM.requestFocus();
        } else if (tfStart.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Start and finish fields are missing");
            tfStart.requestFocus();
        } else if (tfKM.getText().isEmpty() && tfNum.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Km and stage number fields are missing");
            tfNum.requestFocus();
        } else if (tfKM.getText().isEmpty() && tfStart.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Km and start fields are missing");
            tfKM.requestFocus();
        } else if (tfKM.getText().isEmpty() && tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Km and finish fields are missing");
            tfKM.requestFocus();
        } else if (tfFinish.getText().isEmpty() && tfNum.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Finish and stage number fields are missing");
            tfNum.requestFocus();
        } else if (tfFinish.getText().isEmpty() && tfStart.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Finish and start fields are missing");
            tfStart.requestFocus();
        } else if (tfFinish.getText().isEmpty() && tfKM.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Finish and km fields are missing");
            tfKM.requestFocus();
        } else if (tfNum.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "stage number is missing");
            tfNum.requestFocus();
        } else if (tfKM.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Km is missing");
            tfKM.requestFocus();
        } else if (tfFinish.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Finish is missing");
            tfFinish.requestFocus();
        } else if (tfStart.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Start is missing");
            tfStart.requestFocus();
        } else {
            int numStage = Integer.parseInt(tfNum.getText());
            int km = Integer.parseInt(tfKM.getText());
            String start = tfStart.getText();
            String finish = tfFinish.getText();
            int dorsal = Integer.parseInt(cbDorsal.getSelectedItem().toString());

            Database db = new Database();
            try {
                if (db.searchID("netapa", "Etapes", Integer.parseInt(tfNum.getText()))) {
                    MainForm.alertsWarning(this, "ID Duplicated", "ID Duplicated");
                    // putting focus on tfDorsal
                    tfNum.requestFocus();
                } else {
                    // Insert
                    String sqlInsert = "INSERT INTO Etapes VALUES(?,?,?,?,?)";

                    //Connect
                    db.makeConnection();

                    PreparedStatement pst = db.getConnection().prepareStatement(sqlInsert);
                    pst.setInt(1, numStage);
                    pst.setInt(2, km);
                    pst.setString(3, start);
                    pst.setString(4, finish);
                    pst.setInt(5, dorsal);

                    pst.execute();
                    //Disconnect
                    db.closeConnection();
                    //End of Insert
                    //Information Message
                    MainForm.alertsInformation(this, "Row inserted", "Row inserted");
                    //The actual frame close
                    this.setVisible(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddStage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btInsertActionPerformed


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
//        this.rootPane.setEnabled(true);
//        this.rootPane.requestFocus();
    }//GEN-LAST:event_formWindowClosing

    private void consumeEvente(KeyEvent evt, JTextField tf, int max) {
        char c = evt.getKeyChar();
        if (tf.getText().length() > max) {
            evt.consume();
        }
        if (((c < '0') || (c > '9')) && (c != '\b')) {
            evt.consume();
        }
    }

    private void tfKMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKMKeyTyped
        // TODO add your handling code here:
        consumeEvente(evt, tfKM, 11);
    }//GEN-LAST:event_tfKMKeyTyped

    private void tfNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNumKeyTyped
        // TODO add your handling code here:
        consumeEvente(evt, tfNum, 11);
    }//GEN-LAST:event_tfNumKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddStage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btInsert;
    private javax.swing.JComboBox<String> cbDorsal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel pTableStage;
    private javax.swing.JTextField tfFinish;
    private javax.swing.JTextField tfKM;
    private javax.swing.JTextField tfNum;
    private javax.swing.JTextField tfStart;
    // End of variables declaration//GEN-END:variables
}
