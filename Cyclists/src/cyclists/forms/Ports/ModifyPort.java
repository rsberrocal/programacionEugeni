/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cyclists.forms.Ports;

import cyclists.Database;
import cyclists.Entity.Cyclist;
import cyclists.Entity.Ports;
import cyclists.forms.MainForm;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Richard
 */
public class ModifyPort extends javax.swing.JFrame {

    /**
     * Creates new form AddCiclyst
     */
    public ModifyPort() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../../../images/icon.png")));
        //Setting the global index for movement buttons
        index = 0;
        //Setting the Left buttons because we start with index ==0
        btTotalLeft.setEnabled(false);
        btLeft.setEnabled(false);
        cbDorsal.setEnabled(false);
        cbStage.setEnabled(false);
        tfHeight.setEnabled(false);
        tfCategory.setEnabled(false);
        tfSlope.setEnabled(false);
        //Filling up the list with all the data from cyclist
        try {
            Ports p = new Ports();
            portsData = p.listPorts();
            p.addItemsCombo(cbStage, cbDorsal);
            p.loadTable(pTablePorts);
        } catch (SQLException ex) {
            Logger.getLogger(ModifyPort.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Setting up the width and aligning the cell of the table
//        cellWidth();
//        alignCells();
    }
    //Own variables
    //Index to move the buttons
    public int index;
    //list with all the data from cyclist
    public List<Ports> portsData;
    //Booleans for movement buttons
    public boolean btRightPressed = false;
    public boolean btLeftPressed = false;
    public boolean btTotalLeftPressed = false;
    public boolean btSearchPressed = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btRight = new javax.swing.JButton();
        btTotalRight = new javax.swing.JButton();
        btLeft = new javax.swing.JButton();
        btTotalLeft = new javax.swing.JButton();
        btModify = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btSearch = new javax.swing.JButton();
        pTablePorts = new javax.swing.JPanel();
        tfHeight = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbDorsal = new javax.swing.JComboBox<>();
        tfSlope = new javax.swing.JTextField();
        tfCategory = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbStage = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btRight.setText(">");
        btRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRightActionPerformed(evt);
            }
        });

        btTotalRight.setText(">>");
        btTotalRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTotalRightActionPerformed(evt);
            }
        });

        btLeft.setText("<");
        btLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLeftActionPerformed(evt);
            }
        });

        btTotalLeft.setText("<<");
        btTotalLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTotalLeftActionPerformed(evt);
            }
        });

        btModify.setText("Modify");
        btModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModifyActionPerformed(evt);
            }
        });

        jLabel1.setText("Modify Cyclist");

        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        pTablePorts.setMaximumSize(new java.awt.Dimension(32767, 234));

        javax.swing.GroupLayout pTablePortsLayout = new javax.swing.GroupLayout(pTablePorts);
        pTablePorts.setLayout(pTablePortsLayout);
        pTablePortsLayout.setHorizontalGroup(
            pTablePortsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );
        pTablePortsLayout.setVerticalGroup(
            pTablePortsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tfHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfHeightKeyTyped(evt);
            }
        });

        jLabel6.setText("Slope");

        jLabel7.setText("Cyclist Dorsal");

        cbDorsal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));

        tfCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfCategoryKeyTyped(evt);
            }
        });

        jLabel8.setText("Name");

        jLabel4.setText("Height");

        jLabel5.setText("Category");

        cbStage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        cbStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStageActionPerformed(evt);
            }
        });

        jLabel3.setText("Stage Num");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btSearch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbStage, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(btTotalLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btModify)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btLeft)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btRight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btTotalRight)))))
                        .addGap(29, 29, 29)
                        .addComponent(pTablePorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(pTablePorts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(80, 80, 80))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(19, 19, 19)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(tfCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbDorsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(tfSlope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btRight)
                                .addComponent(btLeft)
                                .addComponent(btTotalRight)
                                .addComponent(btTotalLeft))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btModify)
                            .addContainerGap(15, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbStage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void enableFields() {
        if (!tfHeight.isEnabled() && !tfCategory.isEnabled() && !tfSlope.isEnabled() && !cbStage.isEnabled() && !cbDorsal.isEnabled()) {
            tfHeight.setEnabled(true);
            tfCategory.setEnabled(true);
            tfSlope.setEnabled(true);
            cbStage.setEnabled(true);
            cbDorsal.setEnabled(true);
        }
    }

    private void consumeEvente(KeyEvent evt, JTextField tf, int max) {
        char c = evt.getKeyChar();
        if (tf.getText().length() > max) {
            evt.consume();
        }
        if (((c < '0') || (c > '9')) && (c != '\b')) {
            evt.consume();
        }
    }

    private void btRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRightActionPerformed
        // TODO add your handling code here:
        //If any other button was pressed before set index++
        if (btLeftPressed || btSearchPressed || btTotalLeftPressed) {
            index++;
            btLeftPressed = false;
            btTotalLeftPressed = false;
            btSearchPressed = false;
        }
        //If index is less than 0 set index == 0
        if (index < 0) {
            index = 0;
        }
        //Set the TextField with the data of cyclist(index)
        tfName.setText(portsData.get(index).getPortName());
        tfHeight.setText(String.valueOf(portsData.get(index).getHeight()));
        tfCategory.setText(portsData.get(index).getCategory());
        tfSlope.setText(String.valueOf(portsData.get(index).getSlope()));
        cbStage.setSelectedItem(portsData.get(index).getNetapa());
        cbDorsal.setSelectedItem(portsData.get(index).getDorsal());
        //tfTeam.setText(portsData.get(index).getNomeq());
        //Index increase
        index++;
        //If this button boolean wasn't pressed
        if (!btRightPressed) {
            btRightPressed = true;
        }
        //Enable left buttons if they are disabled
        if (!btTotalLeft.isEnabled() && !btLeft.isEnabled()) {
            btTotalLeft.setEnabled(true);
            btLeft.setEnabled(true);
        }
        //Disable right buttons if index is equals to last position from the list
        if (index == portsData.size()) {
            btTotalRight.setEnabled(false);
            btRight.setEnabled(false);
        }
        enableFields();
    }//GEN-LAST:event_btRightActionPerformed

    private void btTotalRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTotalRightActionPerformed
        //Set the TextFields with all the data from the last cyclist        
        tfName.setText(portsData.get(portsData.size() - 1).getPortName());
        tfHeight.setText(String.valueOf(portsData.get(portsData.size() - 1).getHeight()));
        tfCategory.setText(portsData.get(portsData.size() - 1).getCategory());
        tfSlope.setText(String.valueOf(portsData.get(portsData.size() - 1).getSlope()));
        cbStage.setSelectedItem(portsData.get(portsData.size() - 1).getNetapa());
        cbDorsal.setSelectedItem(portsData.get(portsData.size() - 1).getDorsal());

//        tfTeam.setText(portsData.get(portsData.size() - 1).getNomeq());
        //Set index to last position from the list
        index = portsData.size() - 1;
        //Disable right buttons because is the last cyclist
        btTotalRight.setEnabled(false);
        btRight.setEnabled(false);
        //Enable left buttons if they are disable
        if (!btTotalLeft.isEnabled() && !btLeft.isEnabled()) {
            btTotalLeft.setEnabled(true);
            btLeft.setEnabled(true);
        }
        enableFields();
    }//GEN-LAST:event_btTotalRightActionPerformed

    private void btLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeftActionPerformed
        //If any other button was pressed before set index--
        if ((btRightPressed) && index != 1 && index != portsData.size() - 1) {
            index--;
            btRightPressed = false;
        }
        //Set boolean true if this button wasn't pressed before
        if (!btLeftPressed) {
            btLeftPressed = true;
        }
        //Set index ==0 if this index is less than 0
        if (index < 0) {
            index = 0;
        } else {
            //Else reduce index
            index--;
        }
        //Set the TextField with the data of cyclist(index)             
        tfName.setText(portsData.get(index).getPortName());
        tfHeight.setText(String.valueOf(portsData.get(index).getHeight()));
        tfCategory.setText(portsData.get(index).getCategory());
        tfSlope.setText(String.valueOf(portsData.get(index).getSlope()));
        cbStage.setSelectedItem(portsData.get(index).getNetapa());
        cbDorsal.setSelectedItem(portsData.get(index).getDorsal());
        // tfTeam.setText(portsData.get(index).getNomeq());

        //Enable right buttons if they are disabled
        if (!btTotalRight.isEnabled() && !btRight.isEnabled()) {
            btTotalRight.setEnabled(true);
            btRight.setEnabled(true);
        }
        //Disable left buttons if index is the first cyclist
        if (index == 0) {
            btTotalLeft.setEnabled(false);
            btLeft.setEnabled(false);
        }
        enableFields();
    }//GEN-LAST:event_btLeftActionPerformed

    private void btTotalLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTotalLeftActionPerformed
        //Set boolean true if this button wasn't pressed before
        if (!btTotalLeftPressed) {
            btTotalLeftPressed = true;
        }
        //Set the TextFields with all the data from the first cyclist
        tfName.setText(portsData.get(0).getPortName());
        tfHeight.setText(String.valueOf(portsData.get(0).getHeight()));
        tfCategory.setText(portsData.get(0).getCategory());
        tfSlope.setText(String.valueOf(portsData.get(0).getSlope()));
        cbStage.setSelectedItem(portsData.get(0).getNetapa());
        cbDorsal.setSelectedItem(portsData.get(0).getDorsal());
        //Set index to 0 because is the first cyclist
        index = 0;
        //Disable left buttons because is the first cyclist
        btTotalLeft.setEnabled(false);
        btLeft.setEnabled(false);
        //Enable left buttons if they are disable
        if (!btTotalRight.isEnabled() && !btRight.isEnabled()) {
            btTotalRight.setEnabled(true);
            btRight.setEnabled(true);
        }
        enableFields();
    }//GEN-LAST:event_btTotalLeftActionPerformed

    private void btModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModifyActionPerformed
        String oldName = portsData.get(index).getPortName();
        // tfAlerts
        if (tfName.getText().isEmpty() && tfHeight.getText().isEmpty() && tfCategory.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "All values missing", "Name, height, category and slope fields are missing");
            tfName.requestFocus();
        } else if (tfName.getText().isEmpty() && tfHeight.getText().isEmpty() && tfCategory.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name, height and category fields are missing");
            tfName.requestFocus();
        } else if (tfName.getText().isEmpty() && tfHeight.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name, height and slope fields are missing");
            tfName.requestFocus();
        } else if (tfName.getText().isEmpty() && tfCategory.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name, category and slope fields are missing");
            tfName.requestFocus();
        } else if (tfHeight.getText().isEmpty() && tfCategory.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Height, category and slope fields are missing");
        } else if (tfName.getText().isEmpty() && tfCategory.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name and category fields are missing");
            tfName.requestFocus();
        } else if (tfName.getText().isEmpty() && tfHeight.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name and height fields are missing");
            tfName.requestFocus();
        } else if (tfName.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Name and slope fields are missing");
            tfName.requestFocus();
        } else if (tfCategory.getText().isEmpty() && tfName.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Category and name fields are missing");
            tfName.requestFocus();
        } else if (tfCategory.getText().isEmpty() && tfHeight.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Category and height fields are missing");
            tfHeight.requestFocus();
        } else if (tfCategory.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Category and slope fields are missing");
            tfCategory.requestFocus();
        } else if (tfHeight.getText().isEmpty() && tfName.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Height and name fields are missing");
            tfName.requestFocus();
        } else if (tfHeight.getText().isEmpty() && tfCategory.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Height and category fields are missing");
            tfHeight.requestFocus();
        } else if (tfHeight.getText().isEmpty() && tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Height and slope fields are missing");
            tfHeight.requestFocus();
        } else if (tfSlope.getText().isEmpty() && tfName.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Slope and name fields are missing");
            tfName.requestFocus();
        } else if (tfSlope.getText().isEmpty() && tfCategory.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Slope and category fields are missing");
            tfCategory.requestFocus();
        } else if (tfSlope.getText().isEmpty() && tfHeight.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Fields missing", "Slope and height fields are missing");
            tfHeight.requestFocus();
        } else if (tfName.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Name is missing");
            tfName.requestFocus();
        } else if (tfHeight.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Height is missing");
            tfHeight.requestFocus();
        } else if (tfSlope.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Slope is missing");
            tfSlope.requestFocus();
        } else if (tfCategory.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Field missing", "Category is missing");
            tfCategory.requestFocus();
        } else {
            StringBuilder sqlUpdate = new StringBuilder();;
            sqlUpdate.append("update Ports set ");
            sqlUpdate.append("nomport = ? ,");
            sqlUpdate.append("alcada = ? ,");
            sqlUpdate.append("categoria = ? ,");
            sqlUpdate.append("pendent = ? ,");
            sqlUpdate.append("netapa  = ? ,");
            sqlUpdate.append("dorsal = ? ");
            sqlUpdate.append("where nomport = ? ;");

            Database db = new Database();
            try {
                //Connect
                db.makeConnection();

                PreparedStatement pst = db.getConnection().prepareStatement(sqlUpdate.toString());
                pst.setString(1, tfName.getText());
                pst.setInt(2, Integer.parseInt(tfHeight.getText()));
                pst.setString(3, tfCategory.getText());
                pst.setFloat(4, Float.valueOf(tfSlope.getText()));
                pst.setInt(5, Integer.parseInt(cbStage.getSelectedItem().toString()));
                pst.setInt(6, Integer.parseInt(cbDorsal.getSelectedItem().toString()));
                pst.setString(7, oldName);
                String n = pst.toString();
                pst.execute();

                //Disconnect
                db.closeConnection();
                MainForm.alertsInformation(this, "Row Modified", "Row Modified");
            } catch (SQLException ex) {
                Logger.getLogger(ModifyPort.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setVisible(false);
        }
    }//GEN-LAST:event_btModifyActionPerformed

    private void searchPort(String name) {
        //Adding % to search any cyclist with this text
        name = name + "%";
        //Querys
        //Query to know how many cyclist we got with the same name
        String queryCount = "select count(*) from Ports where nomport like '" + name + "';";
        //Query to know these names if we got more than 1 cyclist with the same name
        String queryNames = "select nom from Ports where nomport like '" + name + "';";

        Database db = new Database();
        //If the TextField name is empty, it opens a dialog that inform the user
        if (tfName.getText().isEmpty()) {
            MainForm.alertsWarning(this, "Name Missing", "Name Missing");
        } else {
            try {
                //Connect
                db.makeConnection();
                //Start the query
                Statement stCount = db.getConnection().createStatement();
                ResultSet rsCount = stCount.executeQuery(queryCount);
                //See if we can put IF and not WHILE
                while (rsCount.next()) {//Loop Count
                    //If we got more than 1 cyclist with the same name
                    if (rsCount.getInt(1) > 1) {
                        //Start the query to get these names
                        Statement stName = db.getConnection().createStatement();
                        ResultSet rsName = stName.executeQuery(queryNames);
                        //Array to save the names
                        String[] names = new String[rsCount.getInt(1)];
                        //index to navigate this array
                        int i = 0;
                        while (rsName.next()) {//Loop names to save the names on the array
                            names[i] = rsName.getString(1);
                            i++;
                        }//End loop names
                        //Create a new dialog to make the user chose one of the names below
                        String input = (String) JOptionPane.showInputDialog(null, "Choose Port",
                                "Select a Port", JOptionPane.INFORMATION_MESSAGE, null,
                                names, // Array with names
                                names[0]); // Default choise
                        ;//End dialog
                        //Query to get the data of cyclist choosed
                        String queryFinal = "select alcada,categoria,pendent,netapa,dorsal from Ports where nomport like '" + input + "';";
                        //Start the query
                        Statement stFinal = db.getConnection().createStatement();
                        ResultSet rsFinal = stFinal.executeQuery(queryFinal);
                        //Setting up the TextFields with all the data of this cyclist
                        while (rsFinal.next()) {//Loop
                            tfHeight.setText(String.valueOf(rsFinal.getInt(1)));
                            tfCategory.setText(rsFinal.getString(2));
                            tfSlope.setText(String.valueOf(rsFinal.getFloat(3)));
                            cbStage.setSelectedItem(String.valueOf(rsFinal.getInt(4)));
                            cbDorsal.setSelectedItem(String.valueOf(rsFinal.getInt(5)));
                        }//End loop
                        //Finally set the name of this cyclist
                        tfName.setText(input);
                        //If this cyclist doesn't exists
                    } else if (rsCount.getInt(1) == 0) {
                        //Create a new dialog informing the use that this Cyclist doesnt exist
                        MainForm.alertsInformation(this, "Port doesn't exists", "Port doesn't exists");
                        //If there is only 1 cyclist with this name
                    } else {
                        //Query to know all the data about this cyclist
                        String queryFinal = "select nomport,alcada,categoria,pendent,netapa,dorsal from Ports where nomport like '" + name + "';";
                        //Start the query
                        Statement stFinal = db.getConnection().createStatement();
                        ResultSet rsFinal = stFinal.executeQuery(queryFinal);
                        //Setting up the TextFields with all the data of this cyclist
                        while (rsFinal.next()) {
                            tfName.setText(rsFinal.getString(1));
                            tfHeight.setText(String.valueOf(rsFinal.getInt(2)));
                            tfCategory.setText(rsFinal.getString(3));
                            tfSlope.setText(String.valueOf(rsFinal.getFloat(4)));
                            cbStage.setSelectedItem(String.valueOf(rsFinal.getInt(5)));
                            cbDorsal.setSelectedItem(String.valueOf(rsFinal.getInt(6)));
                        }
                    }
                }
                //Set the index == 0 to search exactly the index of this cyclist
                index = 0;
                //index = portsData.indexOf(tfDorsal.getText());
                for (int j = 0; j < portsData.size(); j++) {//Loop index
                    //If dorsal of cyclist(j) is equals to the text of dorsal TextField
                    if (portsData.get(j).getPortName().equals(String.valueOf(tfName.getText()))) {
                        //If is the last position, set index to the last position
                        if (j == portsData.size()) {
                            index = j - 1;
                        } else {
                            //else set index to j
                            index = j;
                        }
                    }
                }//End loop

                //Disconnect
                db.closeConnection();
            } catch (SQLException ex) {
                Logger.getLogger(ModifyPort.class.getName()).log(Level.SEVERE, null, ex);
            }
            //If index == 0 disable the left buttons and enable the right buttons
            if (index == 0) {
                btTotalLeft.setEnabled(false);
                btLeft.setEnabled(false);
                btTotalRight.setEnabled(true);
                btRight.setEnabled(true);
                //If index == 0 disable the right buttons and enable the left buttons
            } else if (index == portsData.size() - 1) {
                btTotalLeft.setEnabled(true);
                btLeft.setEnabled(true);
                btTotalRight.setEnabled(false);
                btRight.setEnabled(false);
                //If index is between 0 and portsData.size enable all the buttons
            } else {
                btTotalLeft.setEnabled(true);
                btLeft.setEnabled(true);
                btTotalRight.setEnabled(true);
                btRight.setEnabled(true);
            }
            //Finally set true the boolean btSearchPressed to know that this buttons has been pressed
            btSearchPressed = true;
            //And set false the rest of booleans
            btLeftPressed = false;
            btRightPressed = false;
            btTotalLeftPressed = false;
            enableFields();
        }
    }//End function

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        //Calling the function search to search the cyclist that the user put on the TextField name
        searchPort(tfName.getText());
    }//GEN-LAST:event_btSearchActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void tfHeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyTyped
        // TODO add your handling code here:
        consumeEvente(evt, tfHeight, 11);
    }//GEN-LAST:event_tfHeightKeyTyped

    private void tfCategoryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfCategoryKeyTyped
        // TODO add your handling code here:
        consumeEvente(evt, tfCategory, 2);
    }//GEN-LAST:event_tfCategoryKeyTyped

    private void cbStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbStageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyPort().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLeft;
    private javax.swing.JButton btModify;
    private javax.swing.JButton btRight;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btTotalLeft;
    private javax.swing.JButton btTotalRight;
    private javax.swing.JComboBox<String> cbDorsal;
    private javax.swing.JComboBox<String> cbStage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel pTablePorts;
    private javax.swing.JTextField tfCategory;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSlope;
    // End of variables declaration//GEN-END:variables
}
